name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get project name
        id: get_project_name
        run: |
          PROJECT_NAME=$(basename $GITHUB_REPOSITORY)
          echo "PROJECT_NAME=$PROJECT_NAME" | tee -a $GITHUB_ENV

      - name: Get project version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" | tee -a $GITHUB_ENV

      - name: Get previous tag
        id: get_previous_tag
        run: |
          TAGS=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname)
          CURRENT_TAG=$VERSION
          PREVIOUS_TAG=$(echo "$TAGS" | grep -A 1 "^$CURRENT_TAG$" | tail -n 1)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" | tee -a $GITHUB_ENV

      - name: Print tag information
        run: |
          echo "Previous tag: ${{ env.PREVIOUS_TAG }}"
          echo "Current version: ${{ env.VERSION }}"

      - name: Generate Changelog
        env:
          CHANGELOG_GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "${{ env.PREVIOUS_TAG }}" -o "${{ env.PREVIOUS_TAG }}" = "${{ env.VERSION }}" ]; then
            echo "No previous tag found, generating changelog for the entire history"
            docker run -e CHANGELOG_GITHUB_TOKEN -v $(pwd):/usr/local/src/your-app ferrarimarco/github-changelog-generator -u ${{ github.repository_owner }} -p ${{ env.PROJECT_NAME }}
          else
            echo "Generating changelog since tag ${{ env.PREVIOUS_TAG }}"
            docker run -e CHANGELOG_GITHUB_TOKEN -v $(pwd):/usr/local/src/your-app ferrarimarco/github-changelog-generator -u ${{ github.repository_owner }} -p ${{ env.PROJECT_NAME }} --since-tag ${{ env.PREVIOUS_TAG }}
          fi

      - name: Remove Changelog Generator Notice
        run: |
          sed -i '/This Changelog was automatically generated by \[github_changelog_generator\]/d' CHANGELOG.md

      - name: Display Changelog
        run: |
          echo "Generated Changelog:"
          cat CHANGELOG.md

      - name: Update module.prop file
        run: |
          VERSION=${{ env.VERSION }}
          VERSION_CODE=$(echo $VERSION | sed 's/[^0-9]//g')
          sed -i "s/^version=.*/version=$VERSION/" module.prop
          sed -i "s/^versionCode=.*/versionCode=$VERSION_CODE/" module.prop

      - name: Update update.json file
        run: |
          VERSION=${{ env.VERSION }}
          VERSION_CODE=$(echo $VERSION | sed 's/[^0-9]//g')
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" update.json
          sed -i "s/\"versionCode\": .*/\"versionCode\": $VERSION_CODE,/" update.json
          sed -i "s|\"zipUrl\": \".*\"|\"zipUrl\": \"https://github.com/${{ github.repository }}/releases/download/$VERSION/${{ env.PROJECT_NAME }}-release-$VERSION.zip\"|" update.json
          sed -i "s|\"changelog\": \".*\"|\"changelog\": \"https://github.com/${{ github.repository }}/releases/download/$VERSION/CHANGELOG-$VERSION.md\"|" update.json

      - name: Create target directory
        run: mkdir ziptarget

      - name: Move project files to target directory
        run: |
          shopt -s extglob dotglob
          find . -maxdepth 1 ! -name .git ! -name .github ! -name .gitignore ! -name .gitattributes ! -name Makefile ! -name ziptarget ! -name . -exec mv {} ziptarget/ \;

      - name: Upload release ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-release-${{ env.VERSION }}
          path: ziptarget

      - name: Compress project directory
        run: |
          cd ziptarget
          zip -r ../project.zip .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body_path: ./ziptarget/CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./project.zip
          asset_name: ${{ env.PROJECT_NAME }}-release-${{ env.VERSION }}.zip
          asset_content_type: application/octet-stream

      - name: Upload CHANGELOG.md
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ziptarget/CHANGELOG.md
          asset_name: CHANGELOG-${{ env.VERSION }}.md
          asset_content_type: text/markdown

      - name: Move files back from ziptarget
        run: |
          shopt -s dotglob
          find ziptarget -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf ziptarget project.zip

      - name: Push changes to latest branch
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          branch: latest
          force: true
          author_email: 'github-actions[bot]@users.noreply.github.com'
          author_name: 'github-actions[bot]'
          message: 'Update module.prop, update.json and changelog to version $VERSION'
          repository: ${{ github.repository }}

